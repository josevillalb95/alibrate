{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nexport default function useScreen({\n  externalRef = null,\n  oneUse = true\n}) {\n  _s();\n\n  const refItem = useRef();\n  const [isShow, setShow] = useState(false);\n  useEffect(() => {\n    let refCurrent = externalRef ? externalRef.current : refItem.current;\n\n    if (!refCurrent) {\n      return null;\n    }\n\n    const onChante = (entris, observer) => {\n      let intersection = entris[0].isIntersecting;\n\n      if (intersection) {\n        if (oneUse) observer.disconnect();\n        setShow(true);\n      } else {\n        if (!oneUse) setShow(false);\n      }\n    };\n\n    const observer = new IntersectionObserver(onChante, {\n      rootMargin: \"100px\"\n    });\n    observer.observe(refCurrent);\n    return () => observer.disconnect();\n  });\n  return {\n    isShow,\n    refItem\n  };\n}\n\n_s(useScreen, \"4tGBnQe3CFjU0l5Hf4vH9eZip1w=\");","map":{"version":3,"sources":["/Users/josevillalba/Documents/challenge/alibrate/frontend/src/hooks/useScreen.js"],"names":["React","useEffect","useState","useRef","useScreen","externalRef","oneUse","refItem","isShow","setShow","refCurrent","current","onChante","entris","observer","intersection","isIntersecting","disconnect","IntersectionObserver","rootMargin","observe"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,MAAjC,QAA8C,OAA9C;AAEA,eAAe,SAASC,SAAT,CAAmB;AAACC,EAAAA,WAAW,GAAC,IAAb;AAAkBC,EAAAA,MAAM,GAAC;AAAzB,CAAnB,EAAmD;AAAA;;AAC9D,QAAMC,OAAO,GAACJ,MAAM,EAApB;AACA,QAAM,CAACK,MAAD,EAAQC,OAAR,IAAiBP,QAAQ,CAAC,KAAD,CAA/B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,UAAU,GAACL,WAAW,GAACA,WAAW,CAACM,OAAb,GAAqBJ,OAAO,CAACI,OAAvD;;AACA,QAAG,CAACD,UAAJ,EAAe;AACX,aAAO,IAAP;AACH;;AACD,UAAME,QAAQ,GAAC,CAACC,MAAD,EAAQC,QAAR,KAAmB;AAC9B,UAAIC,YAAY,GAACF,MAAM,CAAC,CAAD,CAAN,CAAUG,cAA3B;;AACA,UAAGD,YAAH,EAAgB;AACZ,YAAGT,MAAH,EACIQ,QAAQ,CAACG,UAAT;AACJR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAJD,MAIK;AACD,YAAG,CAACH,MAAJ,EACIG,OAAO,CAAC,KAAD,CAAP;AACP;AACJ,KAVD;;AAWA,UAAMK,QAAQ,GAAC,IAAII,oBAAJ,CAAyBN,QAAzB,EAAkC;AAC7CO,MAAAA,UAAU,EAAC;AADkC,KAAlC,CAAf;AAGAL,IAAAA,QAAQ,CAACM,OAAT,CAAiBV,UAAjB;AACA,WAAO,MAAII,QAAQ,CAACG,UAAT,EAAX;AAEH,GAtBQ,CAAT;AAuBA,SAAO;AAACT,IAAAA,MAAD;AAAQD,IAAAA;AAAR,GAAP;AACH;;GA3BuBH,S","sourcesContent":["import React,{useEffect,useState,useRef} from 'react'\n\nexport default function useScreen({externalRef=null,oneUse=true}) {\n    const refItem=useRef()\n    const [isShow,setShow]=useState(false)\n    useEffect(() => {\n        let refCurrent=externalRef?externalRef.current:refItem.current\n        if(!refCurrent){\n            return null \n        } \n        const onChante=(entris,observer)=>{\n            let intersection=entris[0].isIntersecting\n            if(intersection){\n                if(oneUse) \n                    observer.disconnect()\n                setShow(true)\n            }else{\n                if(!oneUse) \n                    setShow(false)\n            }\n        }\n        const observer=new IntersectionObserver(onChante,{\n            rootMargin:\"100px\",\n        })\n        observer.observe(refCurrent)\n        return ()=>observer.disconnect()\n       \n    })\n    return {isShow,refItem}\n}\n"]},"metadata":{},"sourceType":"module"}